version = "3.9.0"


lineEndings = preserve
trailingCommas = multiple
maxColumn = 120
assumeStandardLibraryStripMargin = no
includeNoParensInSelectChains = yes
align {
  stripMargin = yes
  preset = most
  multiline = true
  stripMargin = true
  arrowEnumeratorGenerator = true
  openParenCallSite = false
  openParenDefnSite = true
  openBracketDefnSite = true
  tokens."+" = [{
    code = ":"
    owners = [{
      regex = "Term\\.Param"
      parents = ["Ctor\\.Primary"]
    }]
  }]
}
binPack.literalArgumentLists = true
docstrings {
  forceBlankLineBefore = no
  oneline = keep
  style = SpaceAsterisk
  wrap = no
}
fileOverride {
  "glob:**/*.sbt" {
    newlines {
      topLevelStatementBlankLines = [
        {
          blanks {
            afterAll = -1,
          }

          minBreaks = 0
        }
      ]
    }

    runner {
      # https://scalameta.org/scalafmt/docs/configuration.html#scala-dialects
      dialect = Scala212
    }
  }

  "glob:**/project/*.scala" {
    newlines {
      topLevelStatementBlankLines = [
        {
          blanks {
            afterAll = -1,
          }

          minBreaks = 0
        }
      ]
    }

    runner {
      # https://scalameta.org/scalafmt/docs/configuration.html#scala-dialects
      dialect = Scala212
    }
  }
}
spaces {
  inImportCurlyBraces = true
  beforeContextBoundColon = IfMultipleBounds
  inInterpolatedStringCurlyBraces = false
}
indentOperator {
  exemptScope = all
}
newlines {
  source=keep
  selfAnnotation = true
  alwaysBeforeMultilineDef = false
  implicitParamListModifierPrefer = before
  beforeCurlyLambdaParams = multilineWithCaseOnly
  inInterpolation = "avoid"
  afterCurlyLambdaParams = squash
  topLevelBodyIfMinStatements = [before, after]
  topLevelBodyMinStatements = 2
  topLevelStatementBlankLines = [
    { blanks = 1 }
  ]
}
project {
  git = true
  includeFilters = [
    ".*\\.scala$"
    ".*\\.sbt$"
    ".*\\.sc$"
  ]
  excludeFilters = [
    "target/.*",
    "generated/.*",
    ".cookiecutter/.*"
  ]
  excludePaths = [
    "glob:**/scalafix/input/**",
    "glob:.cookiecutter//**",
    "glob:**/scalafix/output/**"
  ]
}
rewrite {
  trailingCommas.style = multiple
  redundantBraces {
    ifElseExpressions = yes
    stringInterpolation = true
    generalExpressions = true
    ifElseExpressions = true
    methodBodies = true
    includeUnitMethods = true
    parensForOneLineApply = true
  }

  rules = [
    PreferCurlyFors
    SortModifiers,
    AvoidInfix,
    RedundantParens,
    RedundantBraces,
    Imports
  ]
  redundantBraces {
    generalExpressions = true
    stringInterpolation = true
    methodBodies = true
    includeUnitMethods = false
  }

  imports {
    expand = true
    sort = scalastyle
    groups = [
      ["com\\.worxbend\\..*"],
      ["zio\\..*"],
      ["io\\..*"],
      ["izumi\\..*"],
      ["scala\\..*"],
      ["java\\..*"],
      ["io\\.netty\\..*"],
      ["com\\.sun\\..*"],
    ]
  }

  sortModifiers.order = [
    implicit
    final
    sealed
    abstract
    private
    protected
    lazy
    transparent
    inline
    infix
    opaque
    inline
    infix

    override
    open

  ]
  neverInfix.excludeFilters = [
    until
    to
    by
    eq
    ne
    "should.*"
    "contain.*"
    "must.*"
    in
    ignore
    be
    taggedAs
    thrownBy
    synchronized
    have
    when
    size
    only
    noneOf
    oneElementOf
    noElementsOf
    atLeastOneElementOf
    atMostOneElementOf
    allElementsOf
    inOrderElementsOf
    theSameElementsAs
  ]

}
rewriteTokens {
  "⇒" = "=>"
  "→" = "->"
  "←" = "<-"
}
runner {
  # https://scalameta.org/scalafmt/docs/configuration.html#scala-dialects
  dialect = scala3
  dialectOverride {
    allowSignificantIndentation = true
    allowAsForImportRename = true
    allowStarWildcardImport = true
  }
}
literals {
  long = Upper
  float = Lower
  double = Lower
  hexDigits = Lower
  hexPrefix = Lower
  scientific = Lower
}
