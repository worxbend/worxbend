version = "3.9.0"

align {
  stripMargin = yes
  preset = most
  multiline = true
  stripMargin = true
  arrowEnumeratorGenerator = true
  openParenCallSite = false
  openParenDefnSite = true
  openBracketDefnSite = true
  tokens."+" = [{
    code = ":"
    owners = [{
      regex = "Term\\.Param"
      parents = ["Ctor\\.Primary"]
    }]
  }]
}

trailingCommas = multiple
maxColumn = 120
assumeStandardLibraryStripMargin = no
includeNoParensInSelectChains = yes


docstrings {
  forceBlankLineBefore = no
  oneline = keep
  style = SpaceAsterisk
  wrap = no
}

fileOverride {
  "glob:**/*.sbt" {
    newlines {
      topLevelStatementBlankLines = [
        {
          blanks {
            afterAll = -1,
          }

          minBreaks = 0
        }
      ]
    }

    runner {
      # https://scalameta.org/scalafmt/docs/configuration.html#scala-dialects
      dialect = Scala212
    }
  }

  "glob:**/project/*.scala" {
    newlines {
      topLevelStatementBlankLines = [
        {
          blanks {
            afterAll = -1,
          }

          minBreaks = 0
        }
      ]
    }

    runner {
      # https://scalameta.org/scalafmt/docs/configuration.html#scala-dialects
      dialect = Scala212
    }
  }
}


indentOperator {
  exemptScope = all
}

lineEndings = preserve

maxColumn = 100

newlines {
  topLevelBodyIfMinStatements = [before, after]
  alwaysBeforeElseAfterCurlyIf = true
  topLevelStatements = [before, after]
  topLevelStatementsMinBreaks = 2
  beforeCurlyLambdaParams = multilineWithCaseOnly
  forceBeforeMultilineAssign = def
  beforeMultiline = unfold
  alwaysBeforeElseAfterCurlyIf = yes
  avoidInResultType = yes
  avoidForSimpleOverflow = [slc]
  beforeCurlyLambdaParams = multilineWithCaseOnly
  implicitParamListModifierForce = [after]
  inInterpolation = avoid
  penalizeSingleSelectMultiArgList = true
  beforeOpenParenDefnSite = null
  beforeOpenParenCallSite = null

  topLevelStatementBlankLines = [
    {
      blanks {
        beforeAll = -1,
        afterAll = -1,
        beforeEndMarker = -1
      }

      minBreaks = 0
    },
    {
      blanks {
        beforeAll = -1,
        before = 1,
        after = 1,
        afterAll = -1,
        beforeEndMarker = -1
      }

      minBreaks = 0
    }
  ]
}

project {
  excludeFilters = [
    ".metals"
  ]
}

rewrite {
  trailingCommas.style = multiple
  redundantBraces {
    ifElseExpressions = yes
    stringInterpolation = true
    generalExpressions = true
    ifElseExpressions = true
    methodBodies = true
    includeUnitMethods = true
    parensForOneLineApply = true
  }

  rules = [
    PreferCurlyFors
    SortModifiers,
    AvoidInfix,
    RedundantParens,
    RedundantBraces,
    Imports
  ]

  imports {
    expand = true
    sort = scalastyle
    groups = [
      ["com\\.worxbend\\..*"],
      ["zio\\..*"],
      ["io\\..*"],
      ["izumi\\..*"],
      ["scala\\..*"],
      ["java\\..*"],
      ["io\\.netty\\..*"],
      ["com\\.sun\\..*"],
    ]
  }

  sortModifiers.order = [
    implicit
    final
    sealed
    abstract
    private
    protected
    lazy
    transparent
    inline
    infix
    opaque
    inline
    infix

    override
    open

  ]
  neverInfix.excludeFilters = [
    until
    to
    by
    eq
    ne
    "should.*"
    "contain.*"
    "must.*"
    in
    ignore
    be
    taggedAs
    thrownBy
    synchronized
    have
    when
    size
    only
    noneOf
    oneElementOf
    noElementsOf
    atLeastOneElementOf
    atMostOneElementOf
    allElementsOf
    inOrderElementsOf
    theSameElementsAs
  ]

}

rewriteTokens {
  "⇒" = "=>"
  "→" = "->"
  "←" = "<-"
}

runner {
  # https://scalameta.org/scalafmt/docs/configuration.html#scala-dialects
  dialect = scala3
}

spaces {
  inImportCurlyBraces = true
  beforeContextBoundColon = IfMultipleBounds
  inInterpolatedStringCurlyBraces = true
}


project {
  git = true
  includeFilters = [
    ".*\\.scala$"
    ".*\\.sbt$"
    ".*\\.sc$"
  ]
  excludePaths = [
    "glob:**/scalafix/input/**",
    "glob:**/scalafix/output/**"
  ]
}

literals {
  long = Upper
  float = Lower
  double = Lower
  hexDigits = Lower
  hexPrefix = Lower
  scientific = Lower
}
